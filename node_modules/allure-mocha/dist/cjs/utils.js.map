{"version":3,"file":"utils.js","names":["_nodeOs","require","_nodePath","_nodeProcess","_nodeUrl","_nodeWorker_threads","_allureJsCommons","filename","fileURLToPath","pathToFileURL","__filename","toString","getSuitesOfMochaTest","test","titlePath","slice","exports","resolveParallelModeSetupFile","join","dirname","concat","extname","resolveMochaWorkerId","_env$MOCHA_WORKER_ID","env","MOCHA_WORKER_ID","isMainThread","pid","threadId","allureHostName","ALLURE_HOST_NAME","hostname","getHostLabel","name","LabelName","HOST","value","getWorkerIdLabel","THREAD","getInitialLabels","LANGUAGE","FRAMEWORK"],"sources":["../../src/utils.ts"],"sourcesContent":["import type * as Mocha from \"mocha\";\nimport { hostname } from \"node:os\";\nimport { dirname, extname, join } from \"node:path\";\nimport { env, pid } from \"node:process\";\nimport { fileURLToPath } from \"node:url\";\nimport { isMainThread, threadId } from \"node:worker_threads\";\nimport type { Label } from \"allure-js-commons\";\nimport { LabelName } from \"allure-js-commons\";\n\nconst filename = fileURLToPath(import.meta.url);\n\nexport const getSuitesOfMochaTest = (test: Mocha.Test) => test.titlePath().slice(0, -1);\n\nexport const resolveParallelModeSetupFile = () =>\n  join(dirname(filename), `setupAllureMochaParallel${extname(filename)}`);\n\nexport const resolveMochaWorkerId = () => env.MOCHA_WORKER_ID ?? (isMainThread ? pid : threadId).toString();\n\nconst allureHostName = env.ALLURE_HOST_NAME || hostname();\n\nexport const getHostLabel = (): Label => ({\n  name: LabelName.HOST,\n  value: allureHostName,\n});\n\nexport const getWorkerIdLabel = (): Label => ({\n  name: LabelName.THREAD,\n  value: resolveMochaWorkerId(),\n});\n\nexport const getInitialLabels = (): Label[] => [\n  { name: LabelName.LANGUAGE, value: \"javascript\" },\n  { name: LabelName.FRAMEWORK, value: \"mocha\" },\n  getHostLabel(),\n  getWorkerIdLabel(),\n];\n"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AACA,IAAAI,mBAAA,GAAAJ,OAAA;AAEA,IAAAK,gBAAA,GAAAL,OAAA;AAEA,IAAMM,QAAQ,GAAG,IAAAC,sBAAa,EAAAP,OAAA,QAAAQ,aAAA,CAAAC,UAAA,EAAAC,QAAA,EAAgB,CAAC;AAExC,IAAMC,oBAAoB,GAAIC,IAAgB,IAAKA,IAAI,CAACC,SAAS,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAACC,OAAA,CAAAJ,oBAAA,GAAAA,oBAAA;AAEjF,IAAMK,4BAA4B,GAAGA,CAAA,KAC1C,IAAAC,cAAI,EAAC,IAAAC,iBAAO,EAACZ,QAAQ,CAAC,6BAAAa,MAAA,CAA6B,IAAAC,iBAAO,EAACd,QAAQ,CAAC,CAAE,CAAC;AAACS,OAAA,CAAAC,4BAAA,GAAAA,4BAAA;AAEnE,IAAMK,oBAAoB,GAAGA,CAAA;EAAA,IAAAC,oBAAA;EAAA,QAAAA,oBAAA,GAAMC,gBAAG,CAACC,eAAe,cAAAF,oBAAA,cAAAA,oBAAA,GAAI,CAACG,gCAAY,GAAGC,gBAAG,GAAGC,4BAAQ,EAAEjB,QAAQ,CAAC,CAAC;AAAA;AAACK,OAAA,CAAAM,oBAAA,GAAAA,oBAAA;AAE5G,IAAMO,cAAc,GAAGL,gBAAG,CAACM,gBAAgB,IAAI,IAAAC,gBAAQ,EAAC,CAAC;AAElD,IAAMC,YAAY,GAAGA,CAAA,MAAc;EACxCC,IAAI,EAAEC,0BAAS,CAACC,IAAI;EACpBC,KAAK,EAAEP;AACT,CAAC,CAAC;AAACb,OAAA,CAAAgB,YAAA,GAAAA,YAAA;AAEI,IAAMK,gBAAgB,GAAGA,CAAA,MAAc;EAC5CJ,IAAI,EAAEC,0BAAS,CAACI,MAAM;EACtBF,KAAK,EAAEd,oBAAoB,CAAC;AAC9B,CAAC,CAAC;AAACN,OAAA,CAAAqB,gBAAA,GAAAA,gBAAA;AAEI,IAAME,gBAAgB,GAAGA,CAAA,KAAe,CAC7C;EAAEN,IAAI,EAAEC,0BAAS,CAACM,QAAQ;EAAEJ,KAAK,EAAE;AAAa,CAAC,EACjD;EAAEH,IAAI,EAAEC,0BAAS,CAACO,SAAS;EAAEL,KAAK,EAAE;AAAQ,CAAC,EAC7CJ,YAAY,CAAC,CAAC,EACdK,gBAAgB,CAAC,CAAC,CACnB;AAACrB,OAAA,CAAAuB,gBAAA,GAAAA,gBAAA","ignoreList":[]}