"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveParallelModeSetupFile = exports.resolveMochaWorkerId = exports.getWorkerIdLabel = exports.getSuitesOfMochaTest = exports.getInitialLabels = exports.getHostLabel = void 0;
var _nodeOs = require("node:os");
var _nodePath = require("node:path");
var _nodeProcess = require("node:process");
var _nodeUrl = require("node:url");
var _nodeWorker_threads = require("node:worker_threads");
var _allureJsCommons = require("allure-js-commons");
var filename = (0, _nodeUrl.fileURLToPath)(require('url').pathToFileURL(__filename).toString());
var getSuitesOfMochaTest = test => test.titlePath().slice(0, -1);
exports.getSuitesOfMochaTest = getSuitesOfMochaTest;
var resolveParallelModeSetupFile = () => (0, _nodePath.join)((0, _nodePath.dirname)(filename), "setupAllureMochaParallel".concat((0, _nodePath.extname)(filename)));
exports.resolveParallelModeSetupFile = resolveParallelModeSetupFile;
var resolveMochaWorkerId = () => {
  var _env$MOCHA_WORKER_ID;
  return (_env$MOCHA_WORKER_ID = _nodeProcess.env.MOCHA_WORKER_ID) !== null && _env$MOCHA_WORKER_ID !== void 0 ? _env$MOCHA_WORKER_ID : (_nodeWorker_threads.isMainThread ? _nodeProcess.pid : _nodeWorker_threads.threadId).toString();
};
exports.resolveMochaWorkerId = resolveMochaWorkerId;
var allureHostName = _nodeProcess.env.ALLURE_HOST_NAME || (0, _nodeOs.hostname)();
var getHostLabel = () => ({
  name: _allureJsCommons.LabelName.HOST,
  value: allureHostName
});
exports.getHostLabel = getHostLabel;
var getWorkerIdLabel = () => ({
  name: _allureJsCommons.LabelName.THREAD,
  value: resolveMochaWorkerId()
});
exports.getWorkerIdLabel = getWorkerIdLabel;
var getInitialLabels = () => [{
  name: _allureJsCommons.LabelName.LANGUAGE,
  value: "javascript"
}, {
  name: _allureJsCommons.LabelName.FRAMEWORK,
  value: "mocha"
}, getHostLabel(), getWorkerIdLabel()];
exports.getInitialLabels = getInitialLabels;
//# sourceMappingURL=utils.js.map