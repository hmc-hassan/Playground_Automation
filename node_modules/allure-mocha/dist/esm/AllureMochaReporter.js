var _excluded = ["resultsDir", "writer"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as Mocha from "mocha";
import { Stage, Status } from "allure-js-commons";
import { getStatusFromError } from "allure-js-commons/sdk";
import { FileSystemWriter, ReporterRuntime, ensureSuiteLabels, getEnvironmentLabels, getPackageLabelFromPath, getRelativePath } from "allure-js-commons/sdk/reporter";
import { setGlobalTestRuntime } from "allure-js-commons/sdk/runtime";
import { MochaTestRuntime } from "./MochaTestRuntime.js";
import { setLegacyApiRuntime } from "./legacyUtils.js";
import { getInitialLabels, getSuitesOfMochaTest, resolveParallelModeSetupFile } from "./utils.js";
var {
  EVENT_SUITE_BEGIN,
  EVENT_SUITE_END,
  EVENT_TEST_BEGIN,
  EVENT_TEST_END,
  EVENT_TEST_PASS,
  EVENT_TEST_FAIL,
  EVENT_TEST_PENDING,
  EVENT_HOOK_BEGIN,
  EVENT_HOOK_END
} = Mocha.Runner.constants;
export class AllureMochaReporter extends Mocha.reporters.Base {
  constructor(runner, opts) {
    super(runner, opts);
    _defineProperty(this, "runtime", void 0);
    _defineProperty(this, "applyListeners", () => {
      this.runner.on(EVENT_SUITE_BEGIN, this.onSuite).on(EVENT_SUITE_END, this.onSuiteEnd).on(EVENT_TEST_BEGIN, this.onTest).on(EVENT_TEST_PASS, this.onPassed).on(EVENT_TEST_FAIL, this.onFailed).on(EVENT_TEST_PENDING, this.onPending).on(EVENT_TEST_END, this.onTestEnd).on(EVENT_HOOK_BEGIN, this.onHookStart).on(EVENT_HOOK_END, this.onHookEnd);
    });
    _defineProperty(this, "onSuite", () => {
      this.runtime.startScope();
    });
    _defineProperty(this, "onSuiteEnd", () => {
      this.runtime.writeScope();
    });
    _defineProperty(this, "onTest", test => {
      var fullName = "";
      var globalLabels = getEnvironmentLabels().filter(label => !!label.value);
      var initialLabels = getInitialLabels();
      var labels = globalLabels.concat(initialLabels);
      if (test.file) {
        var testPath = getRelativePath(test.file);
        fullName = "".concat(testPath, ": ");
        var packageLabelFromPath = getPackageLabelFromPath(testPath);
        labels.push(packageLabelFromPath);
      }
      fullName += test.titlePath().join(" > ");
      this.runtime.startTest({
        name: test.title,
        stage: Stage.RUNNING,
        fullName,
        labels
      }, {
        dedicatedScope: true
      });
    });
    _defineProperty(this, "onPassed", () => {
      this.runtime.updateTest(r => {
        r.status = Status.PASSED;
      });
    });
    _defineProperty(this, "onFailed", (_, error) => {
      this.runtime.updateTest(r => {
        r.status = getStatusFromError(error);
        r.statusDetails = {
          message: error.message,
          trace: error.stack
        };
      });
    });
    _defineProperty(this, "onPending", test => {
      this.onTest(test);
      this.runtime.updateTest(r => {
        r.status = Status.SKIPPED;
        r.statusDetails = {
          message: "Test skipped"
        };
      });
    });
    _defineProperty(this, "onTestEnd", test => {
      var defaultSuites = getSuitesOfMochaTest(test);
      this.runtime.updateTest(t => {
        ensureSuiteLabels(t, defaultSuites);
        t.stage = Stage.FINISHED;
      });
      this.runtime.stopTest();
      this.runtime.writeTest();
    });
    _defineProperty(this, "onHookStart", hook => {
      var _hook$originalTitle;
      var name = (_hook$originalTitle = hook.originalTitle) !== null && _hook$originalTitle !== void 0 ? _hook$originalTitle : "";
      // eslint-disable-next-line @typescript-eslint/quotes
      if (name.startsWith('"before')) {
        this.runtime.startFixture("before", {
          name
        });
        // eslint-disable-next-line @typescript-eslint/quotes
      } else if (name.startsWith('"after')) {
        this.runtime.startFixture("after", {
          name
        });
      }
    });
    _defineProperty(this, "onHookEnd", hook => {
      if (this.runtime.hasFixture()) {
        this.runtime.updateFixture(r => {
          var error = hook.error();
          if (error) {
            r.status = getStatusFromError(error);
            r.statusDetails = {
              message: error.message,
              trace: error.stack
            };
          } else {
            r.status = Status.PASSED;
          }
        });
        this.runtime.stopFixture();
      }
    });
    var _ref = opts.reporterOptions || {},
      {
        resultsDir = "allure-results",
        writer
      } = _ref,
      restOptions = _objectWithoutProperties(_ref, _excluded);
    this.runtime = new ReporterRuntime(_objectSpread({
      writer: writer || new FileSystemWriter({
        resultsDir
      })
    }, restOptions));
    var testRuntime = new MochaTestRuntime(this.runtime);
    setGlobalTestRuntime(testRuntime);
    setLegacyApiRuntime(this.runtime);
    if (opts.parallel) {
      var _opts$require;
      opts.require = [...((_opts$require = opts.require) !== null && _opts$require !== void 0 ? _opts$require : []), resolveParallelModeSetupFile()];
    } else {
      this.applyListeners();
    }
  }
}
//# sourceMappingURL=AllureMochaReporter.js.map