import { hostname } from "node:os";
import { dirname, extname, join } from "node:path";
import { env, pid } from "node:process";
import { fileURLToPath } from "node:url";
import { isMainThread, threadId } from "node:worker_threads";
import { LabelName } from "allure-js-commons";
var filename = fileURLToPath(import.meta.url);
export var getSuitesOfMochaTest = test => test.titlePath().slice(0, -1);
export var resolveParallelModeSetupFile = () => join(dirname(filename), "setupAllureMochaParallel".concat(extname(filename)));
export var resolveMochaWorkerId = () => {
  var _env$MOCHA_WORKER_ID;
  return (_env$MOCHA_WORKER_ID = env.MOCHA_WORKER_ID) !== null && _env$MOCHA_WORKER_ID !== void 0 ? _env$MOCHA_WORKER_ID : (isMainThread ? pid : threadId).toString();
};
var allureHostName = env.ALLURE_HOST_NAME || hostname();
export var getHostLabel = () => ({
  name: LabelName.HOST,
  value: allureHostName
});
export var getWorkerIdLabel = () => ({
  name: LabelName.THREAD,
  value: resolveMochaWorkerId()
});
export var getInitialLabels = () => [{
  name: LabelName.LANGUAGE,
  value: "javascript"
}, {
  name: LabelName.FRAMEWORK,
  value: "mocha"
}, getHostLabel(), getWorkerIdLabel()];
//# sourceMappingURL=utils.js.map